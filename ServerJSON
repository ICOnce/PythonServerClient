from socket import *
import threading
import random
import json

def IsNumber(s):
    try:
        float(s)
        return true
    except ValueError:
        return false



def Random(socket, num1, num2):
    return f"Your random number between {num1} and {num2} is {random.uniform(num1, num2)}"



def Add(socket, num1, num2):
    return f"{num1} + {num2} = {float (num1) + float (num2)}"


def Subtract(socket, num1, num2):
    return f"{num1} - {num2} = {float (num1) - float (num2)}"


def ContinuousService(socket):
    returnMessage = ""
    socket.send('{"message": "Connection to the server established\n"}'.encode())
    socket.send('{"message": "Send \"help\" for  a list of commands\n"}'.encode())
    while True: 
        tempMessage = json.loads(socket.recv(1024).decode('latin-1'))
        
        commandReceiver = tempMessage["command"]
        number1 = tempMessage["number1"]
        number2 = tempMessage["number2"]
        if IsNumber(number1) and IsNumber(number2):
            print("Command:" + commandReceiver)
            returnDict = json.dumps('{"status" : "", "message" : ""}')
            match commandReceiver:
                case 'random':
                    returnDict["status"] = "Ok"
                    returnDict["message"] = Random(socket, number1, number2)
                case 'add':
                    returnDict["status"] = "Ok"
                    returnDict["message"] =  Add(socket, number1, number2)
                case 'subtract':
                    returnDict["status"] = "Ok"
                    returnDict["message"] = Subtract(socket, number1, number2)
                case 'exit':
                    break
                case _ : 
                    returnDict["status"] = "error"
                    returnDict["message"] = f'\"{commandReceiver}\" is not a recognized command\n'
            returnDict["message"] += "\n"

        else:
            returnDict["status"] = "error"
            returnDict["message"] = "you entered an invalid number"
        print("Sent back: " + returnDict["message"])
        socket.send(json.dumps(returnDict).encode())
        
    socket.send('{"messaage" : "Disconnecting from server", "status" : "service ended"}'.encode())
    socket.close()


serverPort = 12345
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.bind(('',serverPort))
serverSocket.listen(1)
print("The server is ready to receive")
while True:
    connectionSocket, addr = serverSocket.accept()
    print(f"Connection established with {addr}")
    threading.Thread(target=ContinuousService, args=(connectionSocket,)).start()